qqline(CO2.slr$residuals)
hist(CO2.slr$residuals)
plot(CO2.slr$fitted.values,CO2.slr$residuals,pch=19,main='Residuals vs. fitted values')
plot(CO2$Day, CO2.slr$residuals, pch=19, main='Residuals vs. Day')
# checking the residual plot between (mean) y and x
CO2 %>%
ggplot(aes(x = Day, y = CO2)) +
geom_point() +
geom_smooth(se = FALSE)
# quadratic transformation with a x-variable
CO2 %>%
mutate(sqDay = Day^2) -> CO2
# run the transformed model
# add `Day` to fit the original model
lm(CO2 ~ sqDay + Day, data = CO2) -> sqCO2.slr
summary(sqCO2.slr)
# checking the residuals with fitted model
par(mfrow=c(2,2))
qqnorm(sqCO2.slr$residuals,pch=19)
qqline(sqCO2.slr$residuals)
hist(sqCO2.slr$residuals)
plot(sqCO2.slr$fitted.values, sqCO2.slr$residuals,pch=19,main='Residuals vs. fitted values')
plot(CO2$Day, sqCO2.slr$residuals, pch=19, main='Residuals vs. Day')
# checking the residual plot between (mean) y and x^2
CO2 %>%
ggplot(aes(x = sqDay, y = CO2)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
## 2f
# Make a scatterplot of CO2 levels versus day. Find and evaluate a model that captures the main trend in this scatterplot. Include the estimated trend in your scatterplot.
CO2 %>%
ggplot(aes(x = Day, y = CO2)) +
geom_point() +
geom_smooth(se = FALSE, method = lm) +
theme_bw()
# At what day does your fitted model estimate the minimum (mean) CO2 level? What month and day does this correspond to? If possible, give a 95% confidence interval for the population mean minimum CO2 level at this day. **Note that the predict() function in R can get predicted values and confidence intervals. Use predict(fit,newdata,interval="confidence").
# In fitted model, find the minimum (mean) CO2 level at the day
augment(sqCO2.slr) %>%
arrange(.fitted) %>% # ascending order
head(1)
# approximately corresponding date
date <- ymd(20200401) + 206
date
# save as dataframe
augment(sqCO2.slr) %>%
arrange(.fitted) %>%
slice(1) %>%
select(sqDay, Day) -> newData
# get predicted values and confidence intervals
predict(object = sqCO2.slr, newData, interval = "confidence", level = 0.95)
## 2g
# examine the diagnostic measures for outliers from the model then build as dataframe
leverage <- hatvalues(sqCO2.slr)
student <- rstudent(sqCO2.slr)
dfs <- dffits(sqCO2.slr)
cooksd <- cooks.distance(sqCO2.slr)
data.frame(Day = CO2$Day,
CO2 = CO2$CO2,
fitted = sqCO2.slr$fitted.values,
residual = sqCO2.slr$residuals,
leverage,
student,
dffits = dfs,
cooksd) -> diagnosis
diagnosis
# plot of diagnosis
par(mfrow=c(2,2))
plot(leverage,type='h')
abline(h=0)
plot(student,type='h')
abline(h=0)
plot(dfs,type='h',ylab='dffit')
abline(h=0)
plot(cooksd,type='h')
abline(h=0)
# compare the residual plot vs. diagnosis dataframe
par(mfrow=c(2,2))
qqnorm(sqCO2.slr$residuals,pch=19)
qqline(sqCO2.slr$residuals)
hist(sqCO2.slr$residuals)
plot(sqCO2.slr$fitted.values, sqCO2.slr$residuals,pch=19,main='Residuals vs. fitted values')
plot(CO2$Day, sqCO2.slr$residuals, pch=19, main='Residuals vs. Day')
# studentized residuals
diagnosis %>%
arrange(desc(student)) %>%
filter(student > 3) # based on residual plot
# Leverages
diagnosis %>%
arrange(desc(leverage)) %>%
head(15)
# Cookâ€™s distance
diagnosis %>%
arrange(desc(cooksd))
# DFFIT values
diagnosis %>%
arrange(desc(dffits)) %>%
head()
CO2 %>%
ggplot(aes(x = Day, y = CO2)) +
geom_point() +
geom_smooth(se = FALSE, method = lm) +
theme_bw()
CO2
CO2 %>%
ggplot(aes(x = sqDay, y = CO2)) +
geom_point() +
geom_smooth(se = FALSE, method = lm) +
theme_bw()
CO2 %>%
ggplot(aes(x = Day, y = CO2)) +
geom_point() +
geom_smooth(se = FALSE, method = lm) +
theme_bw()
CO2 %>%
ggplot(aes(x = sqDay, y = CO2)) +
geom_point() +
geom_smooth(se = FALSE, method = lm) +
theme_bw()
runApp('R')
augment(sqCO2.slr) %>%
arrange(.fitted) %>% # ascending order
head(1)
confint(sqCO2.slr, level = 0.95)
CO2
runApp('shan/app-copy.R')
runApp('shan/app-copy.R')
runApp('shan/app-copy.R')
runApp('shan/app-copy.R')
knitr::opts_chunk$set(echo = TRUE)
# installing libraries
library(tidyverse)
library(lubridate)
# download data
ws1 <- read_csv(file = "../data/Datafiniti_Womens_Shoes_Jun19.csv")
ws2 <- read_csv(file = "../data/Datafiniti_Womens_Shoes.csv")
ws3 <- read_csv(file = "../data/7003_1.csv")
# clean and tidy
ws1 %>%
select(dateAdded, brand, categories, colors, manufacturer,
prices.amountMax, prices.color,
prices.offer, prices.size, sizes,
) -> ws1
ws2 %>%
select(dateAdded, brand, categories, colors, manufacturer,
prices.amountMax, prices.color,
prices.offer, prices.size, sizes,
) -> ws2
ws3 %>%
select(dateAdded, brand, categories, colors, manufacturer,
prices.amountMax,  prices.color,
prices.offer, prices.size, sizes,
)  %>%
mutate(prices.amountMax = as.numeric(prices.amountMax)
) -> ws3
# combined all data
ws1 %>%
bind_rows(ws2) %>%
bind_rows(ws3) -> ws
ws %>%
# convert Europe sizes to the US sizes
mutate(sizesUS = str_extract(prices.size, "\\d{1,}"),
sizesUS = recode(sizesUS, "44" = "12",
"43" = "11",
"42" = "11",
"41" = "10",
"40" = "9",
"39" = "8",
"38" = "7.5",
"37" = "6.5",
"36" = "6",
"35" = "5"),
sizesUS = as.numeric(sizesUS)) %>%
# time
separate(dateAdded, into = c("date", "time"), sep = " ") %>%
mutate(date = ymd(date),
time = hms(time),
# add discount price (% off) and calculate after discounted prices
discount = (str_extract(prices.offer, "\\d{1,}")),
discount = case_when(is.na(discount) ~ 100,
TRUE ~ as.numeric(discount)),
prices.discounted =  prices.amountMax*(discount/100)
) %>%
select(-sizes, -prices.size) -> ws
ws %>%
select(date, prices.amountMax, prices.discounted) %>%
rename("origPrices" = "prices.amountMax",
"discPrices" = "prices.discounted") %>%
mutate(Year = str_extract(date, "\\d\\d\\d\\d")) %>%
filter(!is.na(origPrices)) -> wsRegression
wsRegression
# installing libraries
library(tidyverse)
library(lubridate)
# download data
ws1 <- read_csv(file = "../data/Datafiniti_Womens_Shoes_Jun19.csv")
ws2 <- read_csv(file = "../data/Datafiniti_Womens_Shoes.csv")
ws3 <- read_csv(file = "../data/7003_1.csv")
# clean and tidy
ws1 %>%
select(dateAdded, brand, categories, colors, manufacturer,
prices.amountMax, prices.color,
prices.offer, prices.size, sizes,
) -> ws1
ws2 %>%
select(dateAdded, brand, categories, colors, manufacturer,
prices.amountMax, prices.color,
prices.offer, prices.size, sizes,
) -> ws2
ws3 %>%
select(dateAdded, brand, categories, colors, manufacturer,
prices.amountMax,  prices.color,
prices.offer, prices.size, sizes,
)  %>%
mutate(prices.amountMax = as.numeric(prices.amountMax)
) -> ws3
# combined all data
ws1 %>%
bind_rows(ws2) %>%
bind_rows(ws3) -> ws
ws %>%
# convert Europe sizes to the US sizes
mutate(sizesUS = str_extract(prices.size, "\\d{1,}"),
sizesUS = recode(sizesUS, "44" = "12",
"43" = "11",
"42" = "11",
"41" = "10",
"40" = "9",
"39" = "8",
"38" = "7.5",
"37" = "6.5",
"36" = "6",
"35" = "5"),
sizesUS = as.numeric(sizesUS)) %>%
# time
separate(dateAdded, into = c("date", "time"), sep = " ") %>%
mutate(date = ymd(date),
time = hms(time),
# add discount price (% off) and calculate after discounted prices
discount = (str_extract(prices.offer, "\\d{1,}")),
discount = case_when(is.na(discount) ~ 100,
TRUE ~ as.numeric(discount)),
prices.discounted =  prices.amountMax*(discount/100)
) %>%
select(-sizes, -prices.size) -> ws
ws %>%
select(date, prices.amountMax, prices.discounted) %>%
rename("origPrices" = "prices.amountMax",
"discPrices" = "prices.discounted") %>%
mutate(Year = str_extract(date, "\\d\\d\\d\\d")) %>%
filter(!is.na(origPrices)) -> wsRegression
wsRegression
ws
runApp('R')
summary(sqCO2.slr)
runApp('Shan/app-copy.R')
runApp('Shan/app-copy.R')
runApp('Shan/app-copy.R')
runApp('Shan/app-copy.R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
## Data Problem 3 for analyzing CO2 dataframe
# libraries
library(tidyverse)
library(broom)
library(lubridate)
# read data
CO2 <- read_csv("CO2.csv")
CO2
### 2e
# simple linear regression model
CO2.slr <- lm(CO2 ~ Day, data = CO2)
CO2.slr
anova(CO2.slr)
summary(CO2.slr)
# checking the residuals with original data
par(mfrow=c(2,2))
qqnorm(CO2.slr$residuals,pch=19)
qqline(CO2.slr$residuals)
hist(CO2.slr$residuals)
plot(CO2.slr$fitted.values,CO2.slr$residuals,pch=19,main='Residuals vs. fitted values')
plot(CO2$Day, CO2.slr$residuals, pch=19, main='Residuals vs. Day')
# checking the residual plot between (mean) y and x
CO2 %>%
ggplot(aes(x = Day, y = CO2)) +
geom_point() +
geom_smooth(se = FALSE)
# quadratic transformation with a x-variable
CO2 %>%
mutate(sqDay = Day^2) -> CO2
# run the transformed model
# add `Day` to fit the original model
lm(CO2 ~ sqDay + Day, data = CO2) -> sqCO2.slr
summary(sqCO2.slr)
# checking the residuals with fitted model
par(mfrow=c(2,2))
qqnorm(sqCO2.slr$residuals,pch=19)
qqline(sqCO2.slr$residuals)
hist(sqCO2.slr$residuals)
plot(sqCO2.slr$fitted.values, sqCO2.slr$residuals,pch=19,main='Residuals vs. fitted values')
plot(CO2$Day, sqCO2.slr$residuals, pch=19, main='Residuals vs. Day')
# checking the residual plot between (mean) y and x^2
CO2 %>%
ggplot(aes(x = sqDay, y = CO2)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
## 2f
# Make a scatterplot of CO2 levels versus day. Find and evaluate a model that captures the main trend in this scatterplot. Include the estimated trend in your scatterplot.
CO2 %>%
ggplot(aes(x = Day, y = CO2)) +
geom_point() +
geom_smooth(se = FALSE, method = lm) +
theme_bw()
# coefficient of model
confint(sqCO2.slr, level = 0.95)
# At what day does your fitted model estimate the minimum (mean) CO2 level? What month and day does this correspond to? If possible, give a 95% confidence interval for the population mean minimum CO2 level at this day. **Note that the predict() function in R can get predicted values and confidence intervals. Use predict(fit,newdata,interval="confidence").
# In fitted model, find the minimum (mean) CO2 level at the day
augment(sqCO2.slr) %>%
arrange(.fitted) %>% # ascending order
head(1)
# approximately corresponding date
date <- ymd(20200401) + 206
date
# save as dataframe
augment(sqCO2.slr) %>%
arrange(.fitted) %>%
slice(1) %>%
select(sqDay, Day) -> newData
# get predicted values and confidence intervals
predict(object = sqCO2.slr, newData, interval = "confidence", level = 0.95)
## 2g
# examine the diagnostic measures for outliers from the model then build as dataframe
leverage <- hatvalues(sqCO2.slr)
student <- rstudent(sqCO2.slr)
dfs <- dffits(sqCO2.slr)
cooksd <- cooks.distance(sqCO2.slr)
data.frame(Day = CO2$Day,
CO2 = CO2$CO2,
fitted = sqCO2.slr$fitted.values,
residual = sqCO2.slr$residuals,
leverage,
student,
dffits = dfs,
cooksd) -> diagnosis
diagnosis
# plot of diagnosis
par(mfrow=c(2,2))
plot(leverage,type='h')
abline(h=0)
plot(student,type='h')
abline(h=0)
plot(dfs,type='h',ylab='dffit')
abline(h=0)
plot(cooksd,type='h')
abline(h=0)
# compare the residual plot vs. diagnosis dataframe
par(mfrow=c(2,2))
qqnorm(sqCO2.slr$residuals,pch=19)
qqline(sqCO2.slr$residuals)
hist(sqCO2.slr$residuals)
plot(sqCO2.slr$fitted.values, sqCO2.slr$residuals,pch=19,main='Residuals vs. fitted values')
plot(CO2$Day, sqCO2.slr$residuals, pch=19, main='Residuals vs. Day')
# studentized residuals
diagnosis %>%
arrange(desc(student)) %>%
filter(student > 3) # based on residual plot
# Leverages
diagnosis %>%
arrange(desc(leverage)) %>%
head(15)
# Cookâ€™s distance
diagnosis %>%
arrange(desc(cooksd))
# DFFIT values
diagnosis %>%
arrange(desc(dffits)) %>%
head()
CO2 %>%
ggplot(aes(x = sqDay, y = CO2)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
knitr::opts_chunk$set(echo = TRUE)
## Data Problem 3 for analyzing CO2 dataframe
# libraries
library(tidyverse)
library(broom)
library(lubridate)
# read data
CO2 <- read_csv("CO2.csv")
CO2
### 2e
# simple linear regression model
CO2.slr <- lm(CO2 ~ Day, data = CO2)
CO2.slr
anova(CO2.slr)
summary(CO2.slr)
# checking the residuals with original data
par(mfrow=c(2,2))
qqnorm(CO2.slr$residuals,pch=19)
qqline(CO2.slr$residuals)
hist(CO2.slr$residuals)
plot(CO2.slr$fitted.values,CO2.slr$residuals,pch=19,main='Residuals vs. fitted values')
plot(CO2$Day, CO2.slr$residuals, pch=19, main='Residuals vs. Day')
# checking the residual plot between (mean) y and x
CO2 %>%
ggplot(aes(x = Day, y = CO2)) +
geom_point() +
geom_smooth(se = FALSE)
# quadratic transformation with a x-variable
CO2 %>%
mutate(sqDay = Day^2) -> CO2
# run the transformed model (MLR)
# add `Day` to fit the original model
lm(CO2 ~ sqDay + Day, data = CO2) -> sqCO2.slr
summary(sqCO2.slr)
# checking the residuals with fitted model
par(mfrow=c(2,2))
qqnorm(sqCO2.slr$residuals,pch=19)
qqline(sqCO2.slr$residuals)
hist(sqCO2.slr$residuals)
plot(sqCO2.slr$fitted.values, sqCO2.slr$residuals,pch=19,main='Residuals vs. fitted values')
plot(CO2$Day, sqCO2.slr$residuals, pch=19, main='Residuals vs. Day')
# checking the residual plot between (mean) y and x^2
CO2 %>%
ggplot(aes(x = sqDay, y = CO2)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
## 2f
# Make a scatterplot of CO2 levels versus day. Find and evaluate a model that captures the main trend in this scatterplot. Include the estimated trend in your scatterplot.
CO2 %>%
ggplot(aes(x = Day, y = CO2)) +
geom_point() +
geom_smooth(se = FALSE, method = lm) +
theme_bw()
# coefficient of model
confint(sqCO2.slr, level = 0.95)
# At what day does your fitted model estimate the minimum (mean) CO2 level? What month and day does this correspond to? If possible, give a 95% confidence interval for the population mean minimum CO2 level at this day. **Note that the predict() function in R can get predicted values and confidence intervals. Use predict(fit,newdata,interval="confidence").
# In fitted model, find the minimum (mean) CO2 level at the day
augment(sqCO2.slr) %>%
arrange(.fitted) %>% # ascending order
head(1)
# approximately corresponding date
date <- ymd(20200401) + 206
date
# save as dataframe
augment(sqCO2.slr) %>%
arrange(.fitted) %>%
slice(1) %>%
select(sqDay, Day) -> newData
# get predicted values and confidence intervals
predict(object = sqCO2.slr, newData, interval = "confidence", level = 0.95)
## 2g
# examine the diagnostic measures for outliers from the model then build as dataframe
leverage <- hatvalues(sqCO2.slr)
student <- rstudent(sqCO2.slr)
dfs <- dffits(sqCO2.slr)
cooksd <- cooks.distance(sqCO2.slr)
data.frame(Day = CO2$Day,
CO2 = CO2$CO2,
fitted = sqCO2.slr$fitted.values,
residual = sqCO2.slr$residuals,
leverage,
student,
dffits = dfs,
cooksd) -> diagnosis
diagnosis
# plot of diagnosis
par(mfrow=c(2,2))
plot(leverage,type='h')
abline(h=0)
plot(student,type='h')
abline(h=0)
plot(dfs,type='h',ylab='dffit')
abline(h=0)
plot(cooksd,type='h')
abline(h=0)
# compare the residual plot vs. diagnosis dataframe
par(mfrow=c(2,2))
qqnorm(sqCO2.slr$residuals,pch=19)
qqline(sqCO2.slr$residuals)
hist(sqCO2.slr$residuals)
plot(sqCO2.slr$fitted.values, sqCO2.slr$residuals,pch=19,main='Residuals vs. fitted values')
plot(CO2$Day, sqCO2.slr$residuals, pch=19, main='Residuals vs. Day')
# studentized residuals
diagnosis %>%
arrange(desc(student)) %>%
filter(student > 3) # based on residual plot
# Leverages
diagnosis %>%
arrange(desc(leverage)) %>%
head(15)
# Cookâ€™s distance
diagnosis %>%
arrange(desc(cooksd))
# DFFIT values
diagnosis %>%
arrange(desc(dffits)) %>%
head()
